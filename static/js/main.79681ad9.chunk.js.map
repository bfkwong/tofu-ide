{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","output","setOutput","error","setError","className","style","display","Form","margin","width","onSubmit","e","preventDefault","code","currentTarget","codeinput","value","tofu","split","console","log","err","message","Group","Control","as","rows","backgroundColor","border","fontFamily","placeholder","name","id","onKeyDown","key","sstart","target","selectionStart","send","slice","selectionEnd","Button","type","textAlign","marginTop","marginRight","flexGrow","color","map","i","undefined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"ykBA8DeA,MAzDf,WAAgB,IAAD,EACeC,IAAMC,SAAS,CAAC,MAD/B,mBACNC,EADM,KACEC,EADF,OAEaH,IAAMC,UAAS,GAF5B,mBAENG,EAFM,KAECC,EAFD,KAIb,OACE,yBAAKC,UAAU,MAAMC,MAAO,CAACC,QAAS,SACpC,kBAACC,EAAA,EAAD,CACEF,MAAO,CAACG,OAAQ,sBAAuBC,MAAO,OAC9CC,SAAU,SAACC,GACTA,EAAEC,iBACFX,EAAU,IACVE,GAAS,GACT,IAAMU,EAAOF,EAAEG,cAAcC,UAAUC,MACvC,IACEf,EAAUgB,EAAKJ,GAAMK,MAAM,OAC3BC,QAAQC,IAAIH,EAAKJ,IACjB,MAAOQ,GACPpB,EAAU,CAACoB,EAAIC,UACfnB,GAAS,GACTgB,QAAQC,IAAIC,MAIhB,kBAACd,EAAA,EAAKgB,MAAN,KACE,kBAAChB,EAAA,EAAKiB,QAAN,CACEC,GAAG,WACHC,KAAK,KACLrB,MAAO,CAACsB,gBAAiB,UAAWC,OAAQ,kBAAmBC,WAAW,iBAC1EC,YAAY,YACZC,KAAK,YACLC,GAAG,YACHC,UAAW,SAACtB,GACV,GAAc,QAAVA,EAAEuB,IAAe,CACnBvB,EAAEC,iBAEF,IAAMuB,EAASxB,EAAEyB,OAAOC,eAClBC,EAAO3B,EAAEyB,OAAOC,eAMtB,OAJA1B,EAAEyB,OAAOpB,MAAQL,EAAEyB,OAAOpB,MAAMuB,MAAM,EAAGJ,GAAU,MAAQxB,EAAEyB,OAAOpB,MAAMuB,MAAMD,GAEhF3B,EAAEyB,OAAOC,eAAiBF,EAAS,EACnCxB,EAAEyB,OAAOI,aAAeL,EAAS,GAC1B,OAKf,kBAACM,EAAA,EAAD,CAAQC,KAAK,UAAb,YAEF,yBAAKrC,MAAO,CAACsC,UAAW,OAAQC,UAAW,OAAQC,YAAa,OAAQC,SAAU,MAC9E,sCACA,yBAAKzC,MAAO,CAACwB,WAAW,gBAAiBe,UAAW,OAAQG,MAAO7C,EAAQ,MAAQ,UAAWF,EAAOgD,KAAI,SAAChD,EAAQiD,GAAT,OAAe,0BAAMf,IAAKe,QAAeC,IAAXlD,EAAuB,YAAcA,EAAO,qCC5CzKmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjE,GACLiB,QAAQjB,MAAMA,EAAMoB,c","file":"static/js/main.79681ad9.chunk.js","sourcesContent":["import React from 'react';\nimport { Form, Button } from \"react-bootstrap\"\nimport * as tofu from \"tofulang\";\nimport './App.css';\n\nfunction App() {\n  const [output, setOutput] = React.useState([\" \"]);\n  const [error, setError] = React.useState(false);\n\n  return (\n    <div className=\"App\" style={{display: \"flex\"}}>\n      <Form \n        style={{margin: \"20px 30px 20px 30px\", width: \"50%\"}} \n        onSubmit={(e) => {\n          e.preventDefault();\n          setOutput([]);\n          setError(false);\n          const code = e.currentTarget.codeinput.value;\n          try {\n            setOutput(tofu(code).split(\"\\n\"));\n            console.log(tofu(code))\n          } catch (err) {\n            setOutput([err.message]);\n            setError(true);\n            console.log(err);\n          }\n        }}\n      >\n        <Form.Group>\n          <Form.Control \n            as=\"textarea\" \n            rows=\"35\"\n            style={{backgroundColor: \"#e3f0f2\", border: \"0px solid black\", fontFamily:\"Anonymous Pro\"}} \n            placeholder=\"Code away\" \n            name=\"codeinput\"\n            id=\"codeinput\"\n            onKeyDown={(e) => {\n              if (e.key === \"Tab\") {\n                e.preventDefault();\n\n                const sstart = e.target.selectionStart; \n                const send = e.target.selectionStart; \n\n                e.target.value = e.target.value.slice(0, sstart) + \"   \" + e.target.value.slice(send); \n\n                e.target.selectionStart = sstart + 3;\n                e.target.selectionEnd = sstart + 3;\n                return false;\n              }\n            }}\n            />\n        </Form.Group>\n        <Button type=\"submit\">Execute</Button>\n      </Form>\n      <div style={{textAlign: \"left\", marginTop: \"20px\", marginRight: \"30px\", flexGrow: \"1\"}}>\n          <h5>Output</h5>\n          <div style={{fontFamily:\"Anonymous Pro\", marginTop: \"10px\", color: error ? 'red' : 'black'}}>{output.map((output, i) => <span key={i}>{output === undefined ? \"undefined\" : output}<br></br></span>)}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}